@page "/Cpm"
@using Syncfusion.Blazor.Grids;
@using System.ComponentModel.DataAnnotations;
@using CPMMethod.Logic
@using System.ComponentModel
@using Syncfusion.Blazor.Buttons
@using CPMMethod.BlazorWasmClient.Components
@using Syncfusion.Blazor.Gantt
@using CPMMethod.Logic
@using EditMode = Syncfusion.Blazor.Grids.EditMode


<h1>Metoda CPM</h1>
<br/>
<br/>
<h3>1. Wpisz dane czynności i zdarzeń do tabeli a po skończeniu kliknij przycisk Oblicz</h3>

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <br/>
        <SfGrid TValue="Activity" DataSource="@Activities" AllowPaging="false"
                Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Cancel", "Update" })">
            <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Normal"
                              NewRowPosition="NewRowPosition.Bottom"></GridEditSettings>
            <GridEvents TValue="Activity" OnActionBegin="ActionBegin"></GridEvents>
            <GridColumns>
                <GridColumn Field="@nameof(Activity.Id)" IsPrimaryKey="true"></GridColumn>
                <GridColumn Field="@nameof(Activity.Description)"></GridColumn>
                <GridColumn Field="@nameof(Activity.Duration)"
                            ValidationRules="@(new ValidationRules { Required = true, Range = new double[] { 0, 1000 } })"></GridColumn>
                <GridColumn Field="@nameof(Activity.PreActivities)"></GridColumn>
            </GridColumns>
        </SfGrid>
        <div class="row">
            <div class="button-section">
                        <div id="button-control">
                            <div class="col-xs-12 col-sm-12 col-lg-6 col-md-6">
                                <SfButton IsPrimary="true" @onclick="CalculateCPM">Oblicz</SfButton>
                            </div>
                        </div>
                    </div>
        </div>
        @if (_calculated)
        {
            <br/>
            <h3>2. Oto tabela przedstawiająca czynności z wyliczonymi czasami</h3>
            <br/>
            <SfGrid TValue="Activity" DataSource="@Activities" AllowPaging="false" class="table">
                <GridColumns>
                    <GridColumn Field="@nameof(Activity.Id)"></GridColumn>
                    <GridColumn Field="@nameof(Activity.Description)"></GridColumn>
                    <GridColumn Field="@nameof(Activity.Duration)"></GridColumn>
                    <GridColumn Field="@nameof(Activity.EarlyStart)"></GridColumn>
                    <GridColumn Field="@nameof(Activity.EarlyFinish)"></GridColumn>
                    <GridColumn Field="@nameof(Activity.LateStart)"></GridColumn>
                    <GridColumn Field="@nameof(Activity.LateFinish)"></GridColumn>
                    <GridColumn Field="@nameof(Activity.Reserve)"></GridColumn>
                    <GridColumn Field="@nameof(Activity.Critical)"></GridColumn>
                </GridColumns>
            </SfGrid>
            
            <h3>3. Oto podstawowy wykres Gantta</h3>
            <br/>
            <SfGantt DataSource="@GanttActivities" Height="450px" Width="100%" HighlightWeekends="true"
                                 >
                <GanttTaskFields Id="TaskId" Name="TaskId" StartDate="StartDate" EndDate="EndDate" Duration="Duration"
                                 Dependency="Predecessor"></GanttTaskFields>
                <GanttColumns>
                    <GanttColumn Field="TaskName" HeaderText="Id Aktywności"></GanttColumn>
                    <GanttColumn Field="Description" HeaderText="Opis"></GanttColumn>
                </GanttColumns>
                <GanttLabelSettings LeftLabel="TaskName" TValue="GanttActivity"> </GanttLabelSettings>
                <GanttSplitterSettings Position="25%"> </GanttSplitterSettings>
            </SfGantt>
        }
    </div>
</div>



<style>
    #button-control {
        width: 100%;
        margin: 8% 0;
        text-align: center;
    }
    #button-control .e-btn {
        float: left;
    }
    @@media only screen and (max-width: 500px) {
        #button-control {
            margin-left: -3%;
        }
    }
    .e-btn, .e-css.e-btn {
         font-size: 17px;       
    }
    .button-section {
        width: 0;
    }
    #button-control .col-xs-12 {
        margin: 15px 0;
    }
    @@font-face {
        font-family: 'button-icons';
        src: url(data:application/x-font-ttf;charset=utf-8;base64,AAEAAAAKAIAAAwAgT1MvMj1uSf8AAAEoAAAAVmNtYXDOXM6wAAABtAAAAFRnbHlmcV/SKgAAAiQAAAJAaGVhZBNt0QcAAADQAAAANmhoZWEIUQQOAAAArAAAACRobXR4NAAAAAAAAYAAAAA0bG9jYQNWA+AAAAIIAAAAHG1heHABGQAZAAABCAAAACBuYW1lASvfhQAABGQAAAJhcG9zdFAouWkAAAbIAAAA2AABAAAEAAAAAFwEAAAAAAAD9AABAAAAAAAAAAAAAAAAAAAADQABAAAAAQAAYD3WXF8PPPUACwQAAAAAANgtxgsAAAAA2C3GCwAAAAAD9AP0AAAACAACAAAAAAAAAAEAAAANAA0AAgAAAAAAAgAAAAoACgAAAP8AAAAAAAAAAQQAAZAABQAAAokCzAAAAI8CiQLMAAAB6wAyAQgAAAIABQMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUGZFZABA5wHnDQQAAAAAXAQAAAAAAAABAAAAAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAAAAAIAAAADAAAAFAADAAEAAAAUAAQAQAAAAAYABAABAALnCOcN//8AAOcB5wr//wAAAAAAAQAGABQAAAABAAMABAAHAAIACgAJAAgABQAGAAsADAAAAAAADgAkAEQAWgByAIoApgDAAOAA+AEMASAAAQAAAAADYQP0AAIAADcJAZ4CxP08DAH0AfQAAAIAAAAAA9QD9AADAAcAACUhESEBIREhAm4BZv6a/b4BZv6aDAPo/BgD6AAAAgAAAAADpwP0AAMADAAANyE1ISUBBwkBJwERI1kDTvyyAYH+4y4BeQGANv7UTAxNlwEIPf6eAWI9/ukDEwAAAAIAAAAAA/QDngADAAcAADchNSETAyEBDAPo/Bj6+gPo/gxipgFy/t0CRwAAAQAAAAAD9AP0AAsAAAEhFSERMxEhNSERIwHC/koBtnwBtv5KfAI+fP5KAbZ8AbYAAQAAAAAD9AP0AAsAAAEhFSERMxEhNSERIwHh/isB1T4B1f4rPgIfPv4rAdU+AdUAAgAAAAAD9AOlAAMADAAANyE1ISUnBxc3JwcRIwwD6PwYAcWjLO7uLKI/Wj+hoSvs6iyhAm0AAAABAAAAAAP0A/QACwAAAREhFSERMxEhNSERAeH+KwHVPgHV/isD9P4rPv4rAdU+AdUAAAAAAgAAAAADdwP0AAMADAAANyE1ISUBBwkBJwERI4kC7v0SAVj+0SkBdgF4Kf7RPgw+rQEJL/64AUgv/vgC/AAAAAEAAAAAA/QD9AALAAABIRUhETMRITUhESMB2v4yAc5MAc7+MkwCJkz+MgHOTAHOAAIAAAAAA/QDzQADAAcAADchNSE1KQEBDAPo/BgB9AH0/gwzpZUCYAACAAAAAAP0A80AAwAHAAA3ITUhNSkBAQwD6PwYAfQB9P4MM6WVAmAAAAASAN4AAQAAAAAAAAABAAAAAQAAAAAAAQAMAAEAAQAAAAAAAgAHAA0AAQAAAAAAAwAMABQAAQAAAAAABAAMACAAAQAAAAAABQALACwAAQAAAAAABgAMADcAAQAAAAAACgAsAEMAAQAAAAAACwASAG8AAwABBAkAAAACAIEAAwABBAkAAQAYAIMAAwABBAkAAgAOAJsAAwABBAkAAwAYAKkAAwABBAkABAAYAMEAAwABBAkABQAWANkAAwABBAkABgAYAO8AAwABBAkACgBYAQcAAwABBAkACwAkAV8gYnV0dG9uLWljb25zUmVndWxhcmJ1dHRvbi1pY29uc2J1dHRvbi1pY29uc1ZlcnNpb24gMS4wYnV0dG9uLWljb25zRm9udCBnZW5lcmF0ZWQgdXNpbmcgU3luY2Z1c2lvbiBNZXRybyBTdHVkaW93d3cuc3luY2Z1c2lvbi5jb20AIABiAHUAdAB0AG8AbgAtAGkAYwBvAG4AcwBSAGUAZwB1AGwAYQByAGIAdQB0AHQAbwBuAC0AaQBjAG8AbgBzAGIAdQB0AHQAbwBuAC0AaQBjAG8AbgBzAFYAZQByAHMAaQBvAG4AIAAxAC4AMABiAHUAdAB0AG8AbgAtAGkAYwBvAG4AcwBGAG8AbgB0ACAAZwBlAG4AZQByAGEAdABlAGQAIAB1AHMAaQBuAGcAIABTAHkAbgBjAGYAdQBzAGkAbwBuACAATQBlAHQAcgBvACAAUwB0AHUAZABpAG8AdwB3AHcALgBzAHkAbgBjAGYAdQBzAGkAbwBuAC4AYwBvAG0AAAAAAgAAAAAAAAAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANAQIBAwEEAQUBBgEHAQgBCQEKAQsBDAENAQ4ACm1lZGlhLXBsYXkLbWVkaWEtcGF1c2UQLWRvd25sb2FkLTAyLXdmLQltZWRpYS1lbmQHYWRkLW5ldwtuZXctbWFpbC13ZhB1c2VyLWRvd25sb2FkLXdmDGV4cGFuZC0wMy13Zg5kb3dubG9hZC0wMi13ZgphZGQtbmV3XzAxC21lZGlhLWVqZWN0Dm1lZGlhLWVqZWN0LTAxAAA=) format('truetype');
        font-weight: normal;
        font-style: normal;
    }
    
    .table {
        margin-bottom: 2rem;
    }
</style>

@code {
    
    public List<Activity> Activities { get; set; }
    private List<GanttActivity> GanttActivities { get; set; }
    private DateTime ProjectStart { get; set; }
    private DateTime ProjectEnd { get; set; }

    private DateTime _currentDate;
    private double _timePassed = 0;
    
    bool _calculated;

    protected override void OnInitialized()
    {
        Activity A = new()
        {
            Id = "A",
            Duration = 1,
            Preccessors = new List<Activity> {         },
            PreActivities = "-",
            Description = "Aktywność 1"
        };
        Activity B = new()
        {
            Id = "B",
            Duration = 1,
            Preccessors = new List<Activity> { A       },
            PreActivities = "A",
            Description = "Gotowanie makaronu"
        };
        Activity C = new()
        {
            Id = "C",
            Duration = 5,
            Preccessors = new List<Activity> { B       },
            PreActivities = "B",
            Description = "Programowanie w C"
        };
        Activity E = new()
        {
            Id = "E",
            Duration = 4,
            Preccessors = new List<Activity> { B       },
            PreActivities = "B"
        };
        Activity F = new()
        {
            Id = "F",
            Duration = 3,
            Preccessors = new List<Activity> { B       },
            PreActivities = "B"
        };
        Activity G = new()
        {
            Id = "G",
            Duration = 2,
            Preccessors = new List<Activity> { C       },
            PreActivities = "C"
        };
        Activity D = new()
        {
            Id = "D",
            Duration = 3,
            Preccessors = new List<Activity> { C       },
            PreActivities = "C"
        };
        Activity H = new()
        {
            Id = "H",
            Duration = 1,
            Preccessors = new List<Activity> { D, E, F },
            PreActivities = "D,E,F"
        };
        Activity I = new()
        {
            Id = "I",
            Duration = 2,
            Preccessors = new List<Activity> { G, H    },
            PreActivities = "G,H"
        };

        Activities = new List<Activity>{A, B, C, D, E, F, G, H, I};
    }

    private void ActionBegin(ActionEventArgs<Activity> arg)
    {
        if (arg.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            arg.Index = arg.Action switch
            {
                "Add" => Activities.Count(),
                _ => arg.Index
                };
        }
    }

    private void CalculateCPM()
    {
        Activities.CalculatePreccessors();
        Activities.InitActivitiesFields();
        
        ProjectStart = DateTime.Now;
        GanttActivities = new List<GanttActivity>();

        for (var index = 0; index < Activities.Count; index++)
        {
            var activity = Activities[index];
            var ganttActivity = new GanttActivity()
            {
                TaskId = activity.Id,
                Duration = activity.Duration,
                Description = activity.Description,
                Predecessor = activity.PreActivities,
            };

            if (index == 0)
            {
                _currentDate = ProjectStart;
                ganttActivity.StartDate = _currentDate;
                _currentDate = _currentDate.AddDays(activity.Duration);
                ganttActivity.EndDate = _currentDate;
            }
            else
            {
                ganttActivity.StartDate = _currentDate;
                _currentDate = _currentDate.AddDays(activity.Duration);
                ganttActivity.EndDate = _currentDate;
            }

            GanttActivities.Add(ganttActivity);
        }

        _calculated = true;
    }

}