@page "/Cpm"
@using Syncfusion.Blazor.Grids;
@using CPMMethod.Logic
@using Syncfusion.Blazor.Buttons
@using CPMMethod.BlazorWasmClient.Components
@using Syncfusion.Blazor.Popups
@using EditMode = Syncfusion.Blazor.Grids.EditMode


<h1>Metoda CPM</h1>
<br/>
<br/>
<h3>1. Wpisz dane czynności i zdarzeń do tabeli a po skończeniu kliknij przycisk Oblicz</h3>

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <br/>
        <SfGrid TValue="Activity" DataSource="@Activities" AllowPaging="false"
                Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Cancel", "Update" })">
            <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Normal"
                              NewRowPosition="NewRowPosition.Bottom"></GridEditSettings>
            <GridEvents TValue="Activity" OnActionBegin="ActionBegin" OnActionComplete="ActionComplete"></GridEvents>
            <GridColumns>
                <GridColumn Field="@nameof(Activity.Id)" IsPrimaryKey="true" AllowAdding="false" AllowEditing="false"></GridColumn>
                <GridColumn Field="@nameof(Activity.Name)"></GridColumn>
                <GridColumn Field="@nameof(Activity.Duration)"
                            ValidationRules="@(new ValidationRules { Required = true, Range = new double[] { 1, 100 }})"></GridColumn>
                <GridColumn Field="@nameof(Activity.PreActivities)"></GridColumn>
            </GridColumns>
        </SfGrid>
        <div class="row">
            <div class="button-section">
                <div id="button-control">
                    <div class="col-xs-12 col-sm-12 col-lg-6 col-md-6">
                            <SfButton IsPrimary="true" @onclick="CalculateCpm" Disabled="_btDisabled">Oblicz</SfButton>
                        </div>
                    </div>
                <div class="button2">
                    <div class="col-xs-12 col-sm-12 col-lg-6 col-md-6">
                            <SfButton IsPrimary="false" @onclick="ResetCpm" Disabled="_btDisabled">Resetuj</SfButton>
                        </div>
                    </div>
            </div>
        </div>
        @if (_calculated)
        {
            <ResultTable Activities="Activities"></ResultTable>
            <h3>3. Oto standardowy wykres Gantta</h3>
            <GanttChart Activities="Activities" GanttType="GanttCharts.Standard"></GanttChart>
            <h3>4. Oto wykres Gantta typu ASAP (Jaśniejszy kolor oznacza czas rezerwowy)</h3>
            <GanttChart Activities="Activities" GanttType="GanttCharts.Asap"></GanttChart>
        }
    </div>
    <SfDialog Width="335px" IsModal="true" @bind-Visible="_visibility">
            <DialogTemplates>
                <Header> Błąd </Header>
                <Content>
                    <p>Podałeś nie istniejących poprzedników. Zmodyfikuj wprowadzone informacje</p>
                </Content>
            </DialogTemplates>
            <DialogButtons>
                <DialogButton Content="Ok" IsPrimary="true" OnClick="@DlgButtonClick" />
            </DialogButtons>
        <DialogAnimationSettings Effect="@DialogEffect.None"></DialogAnimationSettings>
        </SfDialog>
</div>

@code {
#pragma warning disable CS8618
    private List<Activity> Activities { get; set; }
#pragma warning restore CS8618

    int _id;
    bool _calculated;
    bool _btDisabled = true;
    bool _visibility = false;

    protected override void OnInitialized()
    {
        Activity a = new()
        {
            Id = 1,
            Duration = 5,
            PreActivities = "-",
            Name = "A",
        };
        Activity b = new()
        {
            Id = 2,
            Duration = 7,
            PreActivities = "-",
            Name = "B"
        };
        Activity c = new()
        {
            Id = 3,
            Duration = 6,
            PreActivities = "1",
            Name = "C"
        };
        Activity d = new()
        {
            Id = 4,
            Duration = 8,
            PreActivities = "1",
            Name = "D"
        };
        Activity e = new()
        {
            Id = 5,
            Duration = 3,
            PreActivities = "2",
            Name = "E"
        };
        Activity f = new()
        {
            Id = 6,
            Duration = 4,
            PreActivities = "3",
            Name = "F"
        };
        Activity g = new()
        {
            Id = 7,
            Duration = 2,
            PreActivities = "3",
            Name = "G"
        };
        Activity h = new()
        {
            Id = 8,
            Duration = 5,
            PreActivities = "4,5,6",
            Name = "H"
        };

        Activities = new List<Activity>{a, b, c, d, e, f, g, h};
        //Activities = new List<Activity>();
        _id = Activities.Any() ? Activities.Max(x => x.Id) : 0;

        if (Activities.Count >= 2) _btDisabled = false;
    }

    private void ActionBegin(ActionEventArgs<Activity> arg)
    {
        if (arg.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            switch (arg.Action)
            {
                case "Add":
                {
                    arg.Index = Activities.Count();
                    arg.Data.Id = _id + 1;
                    _id++;
                    
                    var result = Activities.CheckPredecessorsCorrectness(arg.Data.PreActivities);
                    if (!result)
                        _visibility = true;
                    else
                        _btDisabled = false;
                    
                    break;
                }
                case "Edit":
                {
                    var result = Activities.CheckPredecessorsCorrectness(arg.Data.PreActivities);
                    if (!result)
                        _visibility = true;
                    else
                        _btDisabled = false;
                    
                    break;
                }
                default:
                    arg.Index = arg.Index;
                    break;
            }
        }
    }

    private void ActionComplete(ActionEventArgs<Activity> arg)
    {
        _btDisabled = Activities.Count < 2;
    }

    private void DlgButtonClick()
    {
        _btDisabled = true;
        _visibility = false;
    }

    private void ResetCpm()
    {
        _calculated = false;
    }

    private void CalculateCpm()
    {
        Activities.CalculatePreccessors();
        Activities.InitActivitiesFields();
        
        Activities.Sort((p, q) => p.Id.CompareTo(q.Id));

        _calculated = true;
    }
    
    
}

<style>
    #button-control {
            width: 100%;
            margin: 8% 0;
            text-align: center;
        }
        #button-control .e-btn {
            float: left;
        }
        #button-control2 .e-btn {
            margin-left: 5rem;
            float: left;
        }
        @@media only screen and (max-width: 500px) {
            #button-control {
                margin-left: -3%;
            }
        }
        .e-btn, .e-css.e-btn {
             font-size: 17px;       
        }
        .button-section {
            width: 0;
        }
        #button-control .col-xs-12 {
            margin: 15px 0;
        }
        
        .button2 {
                    margin-left: 15px;
                }
        @@font-face {
            font-family: 'button-icons';
            src: url(data:application/x-font-ttf;charset=utf-8;base64,AAEAAAAKAIAAAwAgT1MvMj1uSf8AAAEoAAAAVmNtYXDOXM6wAAABtAAAAFRnbHlmcV/SKgAAAiQAAAJAaGVhZBNt0QcAAADQAAAANmhoZWEIUQQOAAAArAAAACRobXR4NAAAAAAAAYAAAAA0bG9jYQNWA+AAAAIIAAAAHG1heHABGQAZAAABCAAAACBuYW1lASvfhQAABGQAAAJhcG9zdFAouWkAAAbIAAAA2AABAAAEAAAAAFwEAAAAAAAD9AABAAAAAAAAAAAAAAAAAAAADQABAAAAAQAAYD3WXF8PPPUACwQAAAAAANgtxgsAAAAA2C3GCwAAAAAD9AP0AAAACAACAAAAAAAAAAEAAAANAA0AAgAAAAAAAgAAAAoACgAAAP8AAAAAAAAAAQQAAZAABQAAAokCzAAAAI8CiQLMAAAB6wAyAQgAAAIABQMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUGZFZABA5wHnDQQAAAAAXAQAAAAAAAABAAAAAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAAAAAIAAAADAAAAFAADAAEAAAAUAAQAQAAAAAYABAABAALnCOcN//8AAOcB5wr//wAAAAAAAQAGABQAAAABAAMABAAHAAIACgAJAAgABQAGAAsADAAAAAAADgAkAEQAWgByAIoApgDAAOAA+AEMASAAAQAAAAADYQP0AAIAADcJAZ4CxP08DAH0AfQAAAIAAAAAA9QD9AADAAcAACUhESEBIREhAm4BZv6a/b4BZv6aDAPo/BgD6AAAAgAAAAADpwP0AAMADAAANyE1ISUBBwkBJwERI1kDTvyyAYH+4y4BeQGANv7UTAxNlwEIPf6eAWI9/ukDEwAAAAIAAAAAA/QDngADAAcAADchNSETAyEBDAPo/Bj6+gPo/gxipgFy/t0CRwAAAQAAAAAD9AP0AAsAAAEhFSERMxEhNSERIwHC/koBtnwBtv5KfAI+fP5KAbZ8AbYAAQAAAAAD9AP0AAsAAAEhFSERMxEhNSERIwHh/isB1T4B1f4rPgIfPv4rAdU+AdUAAgAAAAAD9AOlAAMADAAANyE1ISUnBxc3JwcRIwwD6PwYAcWjLO7uLKI/Wj+hoSvs6iyhAm0AAAABAAAAAAP0A/QACwAAAREhFSERMxEhNSERAeH+KwHVPgHV/isD9P4rPv4rAdU+AdUAAAAAAgAAAAADdwP0AAMADAAANyE1ISUBBwkBJwERI4kC7v0SAVj+0SkBdgF4Kf7RPgw+rQEJL/64AUgv/vgC/AAAAAEAAAAAA/QD9AALAAABIRUhETMRITUhESMB2v4yAc5MAc7+MkwCJkz+MgHOTAHOAAIAAAAAA/QDzQADAAcAADchNSE1KQEBDAPo/BgB9AH0/gwzpZUCYAACAAAAAAP0A80AAwAHAAA3ITUhNSkBAQwD6PwYAfQB9P4MM6WVAmAAAAASAN4AAQAAAAAAAAABAAAAAQAAAAAAAQAMAAEAAQAAAAAAAgAHAA0AAQAAAAAAAwAMABQAAQAAAAAABAAMACAAAQAAAAAABQALACwAAQAAAAAABgAMADcAAQAAAAAACgAsAEMAAQAAAAAACwASAG8AAwABBAkAAAACAIEAAwABBAkAAQAYAIMAAwABBAkAAgAOAJsAAwABBAkAAwAYAKkAAwABBAkABAAYAMEAAwABBAkABQAWANkAAwABBAkABgAYAO8AAwABBAkACgBYAQcAAwABBAkACwAkAV8gYnV0dG9uLWljb25zUmVndWxhcmJ1dHRvbi1pY29uc2J1dHRvbi1pY29uc1ZlcnNpb24gMS4wYnV0dG9uLWljb25zRm9udCBnZW5lcmF0ZWQgdXNpbmcgU3luY2Z1c2lvbiBNZXRybyBTdHVkaW93d3cuc3luY2Z1c2lvbi5jb20AIABiAHUAdAB0AG8AbgAtAGkAYwBvAG4AcwBSAGUAZwB1AGwAYQByAGIAdQB0AHQAbwBuAC0AaQBjAG8AbgBzAGIAdQB0AHQAbwBuAC0AaQBjAG8AbgBzAFYAZQByAHMAaQBvAG4AIAAxAC4AMABiAHUAdAB0AG8AbgAtAGkAYwBvAG4AcwBGAG8AbgB0ACAAZwBlAG4AZQByAGEAdABlAGQAIAB1AHMAaQBuAGcAIABTAHkAbgBjAGYAdQBzAGkAbwBuACAATQBlAHQAcgBvACAAUwB0AHUAZABpAG8AdwB3AHcALgBzAHkAbgBjAGYAdQBzAGkAbwBuAC4AYwBvAG0AAAAAAgAAAAAAAAAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANAQIBAwEEAQUBBgEHAQgBCQEKAQsBDAENAQ4ACm1lZGlhLXBsYXkLbWVkaWEtcGF1c2UQLWRvd25sb2FkLTAyLXdmLQltZWRpYS1lbmQHYWRkLW5ldwtuZXctbWFpbC13ZhB1c2VyLWRvd25sb2FkLXdmDGV4cGFuZC0wMy13Zg5kb3dubG9hZC0wMi13ZgphZGQtbmV3XzAxC21lZGlhLWVqZWN0Dm1lZGlhLWVqZWN0LTAxAAA=) format('truetype');
            font-weight: normal;
            font-style: normal;
        }
    
    .table {
        margin-bottom: 2rem;
    }
</style>